<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="$(TargetDir)Scribe.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Scribe" #>
<#@ output extension=".cs" #>

<#+ 
	public string TestName(Test test) {
		return string.Join(" ", test.Context, test.Name);
	}
#>

<#+ 
	public string TestMethodName(Test test) {
		var textInfo = new CultureInfo("en-US", false).TextInfo;
		return textInfo.ToTitleCase(string.Join("_", test.Context, test.Name).ToLower())
			.Replace(" ", string.Empty)
			.Replace("'", string.Empty);
	}
#>

<#+ 
	public IEnumerable<Spec> Specs() {
		var thisAssembly = ThisAssembly();
		if (thisAssembly is null)
			return Enumerable.Empty<Spec>();

		return thisAssembly.GetTypes()
			.Where(t => 
				t != typeof(Spec) && 
				typeof(Spec).IsAssignableFrom(t))
			.Select(t => Activator.CreateInstance(t) as Spec);
	}
#>

<#+ 
	public Assembly ThisAssembly() {
		var path = Host.ResolveAssemblyReference("$(TargetPath)");
		if (!File.Exists(path))
			return null;
		return Assembly.LoadFrom(path);
	}
#>
